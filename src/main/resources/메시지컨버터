HttpMessageConverter : 인터페이스

ByteArrayHttpMessageConverter : byte[] 데이터를 처리한다.
    - 클래스 타입 : byte[], 미디어타임: */*
    요청 예) @ReqeustBody byte[] data
    응답 예) @ResponseBody return byte[]   쓰기 미디어타입 : application/octet-stream

StringHttpMessageCoverter : String 문자로 데이터를 처리한다.
    - 클래스 타입 : String, 미디어타입: */*
    요청 예) @RequestBody String data
    응답 예) @ResponseBody return "ok"     쓰기 미디어타입 : text/palin

MappingJackson2HttpMesssageConverter : application/json
    - 클래스 타입 : 객체 또는 HashMap, 미디어 타입 application/json 관련
    요청 예) @RequestBody HelloData data
    응답 예) @ResponseBodyh return helloData   쓰기 미디어타입 : application/json



* HTTP 메시지 컨버터는 어디쯤 있을까?
    HTTP 메시지 컨버터를 사용하는 @RequestBody 도 컨트롤러가 필요로 하는 파라미터의 값에 사용된다.
    @ResponseBody의 경우도 컨트롤러의 반환 값을 이용한다.


    * 요청의 경우
        @ReuqestBody를 처리하는 ArgumentResolver 가 있고, HttpEntity를 처리하는 ArgumentResolver가 있다.
        이 ArgumentResolver 들이 HTTP 메시지 컨버터를 사용해서 필요한 객체를 생성한다.

    * 응답의 경우
        @ResponseBody와 HttpEntity를 처리하는 ReturnValueHandler가 있다.
        여시거 HTTP 메시지 컨버터를 호출해서 응답 결과를 만든다.

    * 스프링 MVC는 @RequestBody, @ResponseBody가 있으면, RequestResponseBodyMethodProcessor(ArguemntResolver)
        HttpEntity가 있으면, HttpEntithMethodProcessor(ArgumentResolver)를 사용한다.




* 확장

    스프링은 다음을 모두 인터페이스로 제공한다. 따라서 필요시 확장 가능.
    HandlerMethodArgumentResolver
    HandlerMethodReturnValueHandler
    HttpMessageConveter

    기능 확장은
    WebMvcConfigurer를 상속 받아서 스프링 빈으로 등록하면 된다.

    @Bean
    public WebMvcConfiguer webMvcConfigurer()
    {
        return new WebMvcConfigurer()
        {
            @Override
            public void addArgumentResolvers(List<HandlerMethodArgumentResolver> resolver)
            {
            }

            @Override
            public void extendMessageCoverters(List<HttpMessageConveter> converters)
            {
            }
        }
    }

